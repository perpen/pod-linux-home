#!/bin/bash
# Encrypts ~/.pod/secrets into ~/.pod-secrets.gpg and back

set -e

trap "{ pkill gpg-agent; exit 255; }" EXIT

usage() {
    cat <<EOF 1>&2
Usage: ./bin/seed-secrets (seed|encrypt) [...]
  The script should be run in the linux-home directory cloned from stash,
  so with relative path ./bin/seed-secrets
  There are 2 modes:
  ./bin/seed-secrets seed FILE [...]
      Each argument is a *relative* path pointing to a secret file.
      The files will be moved to .pod/secrets, preserving the directory
      hierarchy (eg .ssh/id_rsa will be moved to .pod/secret/.ssh/id_rsa)
      then replaced by a symlink pointing to the file location (eg
      .ssh/id_rsa -> .pod/secret/.ssh/id_rsa).
  ./bin/seed-secrets encrypt
      Encrypt .pod/secrets into .pod-secrets.gpg
      then delete .pod/secrets
EOF
    exit 2
}

[[ "$0" != ./bin/seed-secrets || -z $1 ]] && usage

seed() {
    rm -rf .pod/secrets
    mkdir -p .pod/secrets

    for file in "$@"; do
        [[ -L "$file" ]] && {
            echo "already a symlink, assuming it was created by us: $file"
            continue
        }
        echo $file | grep -q '^/' && usage
        local dir=$(dirname $file)
        mkdir -p .pod/secrets/$dir
        mv $file .pod/secrets/$dir
        local depth=$(echo $file | tr -cd / | wc -c)
        local prefix=
        [[ $depth -gt 0 ]] &&
            prefix=$(eval printf '../%0.s' {1..$depth})
        ln -sfv ${prefix}.pod/secrets/$file $file 
    done
}

encrypt() {
    [[ -d .pod/secrets ]] || {
        echo "No directory .pod/secrets - did you run '$0 encrypt'?"
        exit 1
    }
    cat <<EOF
This will encrypt .pod/secrets to .pod-secrets.gpg then delete .pod/secrets.
Press Enter to proceed...
EOF
    read
    rm -f .pod-secrets.gpg
    export GPG_TTY=$(tty)
    tar cfvz - .pod/secrets | gpg -c --cipher-algo aes256 -o .pod-secrets.gpg
    rm -rf .pod/secrets
}

decrypt() {
    rm -rf .pod/secrets
    export GPG_TTY=$(tty)
    gpg -d --cipher-algo aes256 -o - .pod-secrets.gpg | tar xfz -
}

eval "$@"
